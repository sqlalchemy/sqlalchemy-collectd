# this config file is the same as client.conf, but also
# includes the optional "connmon" plugin.
#
#
# Run the server as:
# collectd -f -C client_plus_connmon.conf
#
# received messages will be dumped as JSON to stdout.
#
# then in another window run connmon:
# connmon

# send logging to STDOUT
LoadPlugin logfile
<Plugin logfile>
    # note "debug" will usually not work
    LogLevel "info"
    File STDOUT
    Timestamp true
    PrintSeverity true
</Plugin>

# write messages in JSON format to the log
LoadPlugin write_log
<Plugin write_log>
    Format JSON
</Plugin>

LoadPlugin python
<Plugin python>
    ModulePath "../../"
    LogTraces true

    Import "sqlalchemy_collectd.server.plugin"

    <Module "sqlalchemy_collectd.server.plugin">
        listen "127.0.0.1" 25827

        # set to "debug" to show messaging
        #loglevel "debug"

    </Module>

    Import "sqlalchemy_collectd.connmon.plugin"
    <Module "sqlalchemy_collectd.connmon.plugin">

        # monitor.  This means we will send out stats to the given
        # network address via UDP; a connmon client would then use
        # "connmon listen" to receive these stats.
        # with this approach, many collectd servers with the connmon
        # plugin can all be directed to send their data to a particular
        # address.
        # monitor "127.0.0.1" 25828

        # listen.  This means we will listen for clients to connect to the
        # given network address via UDP, and then send stats to each client
        # for the span of time that each client continues to send a "ping"
        # message every 90 seconds; a connmon client would then use "
        # connmon connect" to connect to this server.
        # with this approach, many connmon clients can connect to this
        # service, as well as other sqlalhcemy-collectd servers
        listen "127.0.0.1" 25828

        # set to "debug" to show messaging
        loglevel "debug"
    </Module>

</Plugin>


